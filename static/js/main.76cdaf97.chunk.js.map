{"version":3,"sources":["components/Forecast/Forecast.module.css","components/Conditions/Conditions.module.css","components/Conditions/Conditions.js","components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","humidity","weather","description","Forecast","useState","city","setCity","unit","setUnit","setResponseObj","setError","setLoading","onSubmit","e","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","process","then","response","json","Error","console","log","catch","err","message","type","placeholder","maxLength","textInput","value","onChange","target","Radio","checked","Button","Conditions","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,wBAAwB,OAAS,yBAAyB,UAAY,8B,gBCAxID,EAAOC,QAAU,CAAC,QAAU,4BAA4B,MAAQ,0BAA0B,OAAS,2BAA2B,KAAO,2B,wLCwBtHC,EAtBI,SAACC,GAChB,OACI,yBAAKC,UAAWC,IAAQC,SAEnBH,EAAMI,OAAS,2BAAOH,UAAWC,IAAQG,OAA1B,8BAEfL,EAAMM,SAAW,yBAAKL,UAAWC,IAAQK,SAGf,MAA1BP,EAAMQ,YAAYC,IACf,6BACI,2BAAG,gCAAST,EAAMQ,YAAYE,OAC9B,2CAAiBC,KAAKC,MAAMZ,EAAMQ,YAAYK,KAAKC,MAAnD,YACA,8CAAoBH,KAAKC,MAAMZ,EAAMQ,YAAYK,KAAKE,WACtD,0CAAgBf,EAAMQ,YAAYQ,QAAQ,GAAGC,cAEnD,O,gBC2ECC,EA1FE,WAAO,IAAD,EAEGC,mBAAS,IAFZ,mBAEdC,EAFc,KAERC,EAFQ,OAGGF,mBAAS,YAHZ,mBAGdG,EAHc,KAGRC,EAHQ,OAIiBJ,mBAAS,IAJ1B,mBAIdX,EAJc,KAIDgB,EAJC,OAKKL,oBAAS,GALd,mBAKdf,EALc,KAKPqB,EALO,OAMSN,oBAAS,GANlB,mBAMdb,EANc,KAMLoB,EANK,KA8CnB,OACI,6BACI,mFACA,0BAAMC,SAzClB,SAAqBC,GAGjB,GAFAA,EAAEC,iBAEkB,IAAhBT,EAAKU,OACL,OAAOL,GAAS,GAIpBA,GAAS,GACTD,EAAe,IAEfE,GAAW,GAEX,IAAMK,EAAiBC,mBAAmBZ,GAE1Ca,MAAM,mEAAD,OAAoEX,EAApE,cAA8ES,GAAkB,CACjG,OAAU,MACV,QAAW,CACP,kBAAmB,4CACnB,iBAAkBG,wDAGzBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,GAAqB,MAAjBA,EAAS3B,IACT,MAAM,IAAI6B,MAEdC,QAAQC,IAAIJ,GACZZ,EAAeY,GACfV,GAAW,MAEde,OAAM,SAAAC,GACHjB,GAAS,GACTC,GAAW,GACXa,QAAQC,IAAIE,EAAIC,cAQR,2BACIC,KAAK,OACLC,YAAY,aACZC,UAAU,KACV7C,UAAWC,IAAQ6C,UACnBC,MAAO5B,EACP6B,SAAU,SAACrB,GAAD,OAAOP,EAAQO,EAAEsB,OAAOF,UAEtC,2BAAO/C,UAAWC,IAAQiD,OACtB,2BACIP,KAAK,QACLlC,KAAK,QACL0C,QAAkB,aAAT9B,EACT0B,MAAM,WACNC,SAAU,SAACrB,GAAD,OAAOL,EAAQK,EAAEsB,OAAOF,UAN1C,cAUA,2BAAO/C,UAAWC,IAAQiD,OACtB,2BACIP,KAAK,QACLlC,KAAK,QACL0C,QAAkB,WAAT9B,EACT0B,MAAM,SACNC,SAAU,SAACrB,GAAD,OAAOL,EAAQK,EAAEsB,OAAOF,UAN1C,WAWA,4BAAQ/C,UAAWC,IAAQmD,OAAQT,KAAK,UAAxC,gBAEJ,kBAACU,EAAD,CACG9C,YAAaA,EACbJ,MAAOA,EACPE,QAASA,MC1ETiD,MAVf,WACE,OACE,yBAAKtD,UAAU,OACb,8BACE,kBAAC,EAAD,SCIYuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.76cdaf97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"Forecast_textInput__3q-gV\",\"Radio\":\"Forecast_Radio__1Vb1h\",\"Button\":\"Forecast_Button__3kjv_\",\"example_a\":\"Forecast_example_a__1Bf-u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__3bKu9\",\"Small\":\"Conditions_Small__3ek8r\",\"Loader\":\"Conditions_Loader__1K3sp\",\"spin\":\"Conditions_spin__1tosX\"};","import React from 'react';\r\nimport classes from './Conditions.module.css'\r\n\r\nconst conditions = (props) => {\r\n    return (\r\n        <div className={classes.Wrapper}>\r\n\r\n            {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\r\n\r\n            {props.loading && <div className={classes.Loader} />}\r\n\r\n\r\n            {props.responseObj.cod === 200 ?\r\n                <div>\r\n                    <p><strong>{props.responseObj.name}</strong></p>\r\n                    <p>Temperature: {Math.round(props.responseObj.main.temp)} degrees</p>\r\n                    <p>Humidity Index: {Math.round(props.responseObj.main.humidity)}</p>\r\n                    <p>Conditions: {props.responseObj.weather[0].description}</p>\r\n                </div>\r\n            : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default conditions;","import React, { useState } from 'react';\r\nimport Conditions from '../Conditions/Conditions';\r\nimport classes from './Forecast.module.css';\r\n\r\nconst Forecast = () => {\r\n\r\n    let [city, setCity] = useState('');\r\n    let [unit, setUnit] = useState('imperial');\r\n    let [responseObj, setResponseObj] = useState({});\r\n    let [error, setError] = useState(false);\r\n    let [loading, setLoading] = useState(false);\r\n\r\nfunction getForecast(e) {\r\n    e.preventDefault();\r\n\r\n    if (city.length === 0) {\r\n        return setError(true);\r\n    }\r\n\r\n    // Clear state in preparation for new data\r\n    setError(false);\r\n    setResponseObj({});\r\n    \r\n    setLoading(true);\r\n    \r\n    const uriEncodedCity = encodeURIComponent(city);\r\n\r\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n            \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\r\n        }\r\n    })\r\n    .then(response => response.json())\r\n    .then(response => {\r\n        if (response.cod !== 200) {\r\n            throw new Error()\r\n        }\r\n        console.log(response)\r\n        setResponseObj(response);\r\n        setLoading(false);\r\n    })\r\n    .catch(err => {\r\n        setError(true);\r\n        setLoading(false);\r\n        console.log(err.message);\r\n    });\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <h2>Search for Current Weather Conditions in Your City!</h2>\r\n            <form onSubmit={getForecast}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter City\"\r\n                    maxLength=\"50\"\r\n                    className={classes.textInput}\r\n                    value={city}\r\n                    onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"imperial\"}\r\n                        value=\"imperial\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Fahrenheit\r\n                </label>\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"metric\"}\r\n                        value=\"metric\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Celcius\r\n                </label>\r\n\r\n                <button className={classes.Button} type=\"submit\">Get Weather</button>\r\n            </form>\r\n            <Conditions\r\n               responseObj={responseObj}\r\n               error={error}\r\n               loading={loading}\r\n               />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forecast;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Forecast from \"./components/Forecast/Forecast\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <main>\r\n        <Forecast />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}